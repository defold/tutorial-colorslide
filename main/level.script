local colors = require("main.colors")

local function make_empty_slot(x, y)
	local l = x - 1 .. ":" .. y
	local r = x + 1 .. ":" .. y
	local u = x .. ":" .. y + 1
	local d = x .. ":" .. y - 1
	return { x = x, y = y, neighbors = { l, r, u, d } }
end

local function make_brick(brick_go, color, correct)
	return { go = brick_go, color = color, correct = correct}
end

local function empty_neighbor(id, empty)
	for i, v in ipairs(empty.neighbors) do
		if id == v then
			return true
		end
	end
	return false
end

local function brick_pos(x, y)
	return vmath.vector3(x * 128 - 64, y * 128 - 64, 0.01)
end

local function populate_level(self)
	local x, y, w, h = tilemap.get_bounds("board#tiles")

	for ix=x,x+w-1 do
		for iy=y, h+y-1 do
			local brick_color = tilemap.get_tile("board#tiles", "setup", ix, iy)
			local board_color = tilemap.get_tile("board#tiles", "board", ix, iy)
			
			-- clear the setup layer tile
			tilemap.set_tile("board#tiles", "setup", ix, iy, 0)

			local pos = brick_pos(ix, iy)
			local props = {}
			if brick_color > 0 then
				props[hash("/brick")] = { color = brick_color }
				local ids = collectionfactory.create("#brickfactory", pos, nil, props)

				-- store the root object ("brick") for each instance.
				local brick = ids[hash("/brick")]
				local correct = colors.compare(brick_color, board_color)
				self.bricks[ix .. ":" .. iy] = make_brick(brick, brick_color, correct)
				
				msg.post(brick, "on_correct_color", { correct = correct })
			end

			if brick_color == 0 and board_color > 0 then
				self.empty_slot = make_empty_slot(ix, iy)
			end
		end
	end
end

local function all_correct(bricks)
	for k, b in pairs(bricks) do
		if not b.correct then
			return false
		end
	end
	return true
end

local function bounce(bricks)
	for k, b in pairs(bricks) do
		local brick = b.go
		local pos = go.get_position(brick)
		local delay = 0.3 + math.random() / 6
		go.animate(brick, "position.y", go.PLAYBACK_LOOP_PINGPONG, pos.y + 30, go.EASING_OUTSINE, 0.33, delay)
	end
end

function init(self)
	self.bricks = {}
	self.completed = false
	populate_level(self)
	msg.post(".", "acquire_input_focus")
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and not self.completed then
		if action.pressed then
			local x = math.ceil(action.x / 128)
			local y = math.ceil(action.y / 128)
			local brick_id = x .. ":" .. y
			if empty_neighbor(brick_id, self.empty_slot) and self.bricks[brick_id] then
				-- slide the brick into the empty space
				local brick = self.bricks[brick_id].go
				local empty_x = self.empty_slot.x
				local empty_y = self.empty_slot.y

				-- update the moved brick
				local brick_color = self.bricks[brick_id].color
				local board_color = tilemap.get_tile("board#tiles", "board", empty_x, empty_y)
				local correct = colors.compare(brick_color, board_color)
				self.bricks[empty_x .. ":" .. empty_y] = make_brick(brick, brick_color, correct)
				self.bricks[x .. ":" .. y] = nil

				-- there is a new empty slot
				self.empty_slot = make_empty_slot(x, y)
				
				-- animate the brick into place
				local target = brick_pos(empty_x, empty_y)
				go.animate(brick, "position", go.PLAYBACK_ONCE_FORWARD, target, go.EASING_INOUTQUAD, 0.2, 0, function()
					msg.post(brick, "on_correct_color", { correct = correct })

					if self.completed then
						bounce(self.bricks)
					end
				end)

				-- check if the board is solved
				if all_correct(self.bricks) then
					msg.post("#gui", "level_completed")
					self.completed = true
				end
			end
		end
	end
end